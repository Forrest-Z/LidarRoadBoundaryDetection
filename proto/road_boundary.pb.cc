// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/road_boundary.proto

#include "proto/road_boundary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2froad_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2froad_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2froad_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2froad_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2froad_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto;
namespace RoadBoundary {
class RoadBoundaryMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadBoundaryMsg> _instance;
} _RoadBoundaryMsg_default_instance_;
class CloudMapperMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudMapperMsg> _instance;
} _CloudMapperMsg_default_instance_;
class BinReaderMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinReaderMsg> _instance;
} _BinReaderMsg_default_instance_;
class GroundSegmentationMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundSegmentationMsg> _instance;
} _GroundSegmentationMsg_default_instance_;
class FeaturePointsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeaturePointsMsg> _instance;
} _FeaturePointsMsg_default_instance_;
class BoundaryPointsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryPointsMsg> _instance;
} _BoundaryPointsMsg_default_instance_;
}  // namespace RoadBoundary
static void InitDefaultsscc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_BinReaderMsg_default_instance_;
    new (ptr) ::RoadBoundary::BinReaderMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::BinReaderMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_BoundaryPointsMsg_default_instance_;
    new (ptr) ::RoadBoundary::BoundaryPointsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::BoundaryPointsMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_CloudMapperMsg_default_instance_;
    new (ptr) ::RoadBoundary::CloudMapperMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::CloudMapperMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_FeaturePointsMsg_default_instance_;
    new (ptr) ::RoadBoundary::FeaturePointsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::FeaturePointsMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_GroundSegmentationMsg_default_instance_;
    new (ptr) ::RoadBoundary::GroundSegmentationMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::GroundSegmentationMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_RoadBoundaryMsg_default_instance_;
    new (ptr) ::RoadBoundary::RoadBoundaryMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadBoundary::RoadBoundaryMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto}, {
      &scc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto.base,
      &scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto.base,
      &scc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto.base,
      &scc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto.base,
      &scc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2froad_5fboundary_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2froad_5fboundary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2froad_5fboundary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2froad_5fboundary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, cloudmappermsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, binreadermsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, groundsegmentationmsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, featurepointsmsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, boundarypointsmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, lowerbound_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, upperbound_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, nscanrings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, bindir_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, framenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::GroundSegmentationMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::GroundSegmentationMsg, segthres_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightmaxthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightminthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightregion_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightsigmathre_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, curvatureregion_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, curvaturethres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, distancehorizonthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, distanceverticalthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, angularres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, useverticle_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, usehorizon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, varthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, meanthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, gridnum_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, gridres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, curvefitthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, usecurveransac_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RoadBoundary::RoadBoundaryMsg)},
  { 10, -1, sizeof(::RoadBoundary::CloudMapperMsg)},
  { 18, -1, sizeof(::RoadBoundary::BinReaderMsg)},
  { 25, -1, sizeof(::RoadBoundary::GroundSegmentationMsg)},
  { 31, -1, sizeof(::RoadBoundary::FeaturePointsMsg)},
  { 47, -1, sizeof(::RoadBoundary::BoundaryPointsMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_RoadBoundaryMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_CloudMapperMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_BinReaderMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_GroundSegmentationMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_FeaturePointsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_BoundaryPointsMsg_default_instance_),
};

const char descriptor_table_protodef_proto_2froad_5fboundary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/road_boundary.proto\022\014RoadBoundar"
  "y\"\263\002\n\017RoadBoundaryMsg\0224\n\016cloudMapperMsg\030"
  "\001 \001(\0132\034.RoadBoundary.CloudMapperMsg\0220\n\014b"
  "inReaderMsg\030\002 \001(\0132\032.RoadBoundary.BinRead"
  "erMsg\022B\n\025groundSegmentationMsg\030\003 \001(\0132#.R"
  "oadBoundary.GroundSegmentationMsg\0228\n\020fea"
  "turePointsMsg\030\004 \001(\0132\036.RoadBoundary.Featu"
  "rePointsMsg\022:\n\021boundaryPointsMsg\030\005 \001(\0132\037"
  ".RoadBoundary.BoundaryPointsMsg\"L\n\016Cloud"
  "MapperMsg\022\022\n\nlowerBound\030\001 \001(\002\022\022\n\nupperBo"
  "und\030\002 \001(\002\022\022\n\nnScanRings\030\003 \001(\005\"0\n\014BinRead"
  "erMsg\022\016\n\006binDir\030\001 \001(\t\022\020\n\010frameNum\030\002 \001(\005\""
  ")\n\025GroundSegmentationMsg\022\020\n\010segThres\030\001 \001"
  "(\002\"\234\002\n\020FeaturePointsMsg\022\026\n\016heightMaxThre"
  "s\030\001 \001(\002\022\026\n\016heightMinThres\030\002 \001(\002\022\024\n\014heigh"
  "tRegion\030\003 \001(\005\022\027\n\017heightSigmaThre\030\004 \001(\002\022\027"
  "\n\017curvatureRegion\030\005 \001(\005\022\026\n\016curvatureThre"
  "s\030\006 \001(\002\022\034\n\024distanceHorizonThres\030\007 \001(\002\022\035\n"
  "\025distanceVerticalThres\030\010 \001(\002\022\022\n\nangularR"
  "es\030\t \001(\002\022\023\n\013useVerticle\030\n \001(\010\022\022\n\nuseHori"
  "zon\030\013 \001(\010\"\211\001\n\021BoundaryPointsMsg\022\020\n\010varTh"
  "res\030\001 \001(\002\022\021\n\tmeanThres\030\002 \001(\002\022\017\n\007gridNum\030"
  "\003 \001(\005\022\017\n\007gridRes\030\004 \001(\002\022\025\n\rcurveFitThres\030"
  "\005 \001(\002\022\026\n\016useCurveRansac\030\006 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2froad_5fboundary_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2froad_5fboundary_2eproto_sccs[6] = {
  &scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto.base,
  &scc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto.base,
  &scc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto.base,
  &scc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto.base,
  &scc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto.base,
  &scc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2froad_5fboundary_2eproto_once;
static bool descriptor_table_proto_2froad_5fboundary_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2froad_5fboundary_2eproto = {
  &descriptor_table_proto_2froad_5fboundary_2eproto_initialized, descriptor_table_protodef_proto_2froad_5fboundary_2eproto, "proto/road_boundary.proto", 957,
  &descriptor_table_proto_2froad_5fboundary_2eproto_once, descriptor_table_proto_2froad_5fboundary_2eproto_sccs, descriptor_table_proto_2froad_5fboundary_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_proto_2froad_5fboundary_2eproto::offsets,
  file_level_metadata_proto_2froad_5fboundary_2eproto, 6, file_level_enum_descriptors_proto_2froad_5fboundary_2eproto, file_level_service_descriptors_proto_2froad_5fboundary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2froad_5fboundary_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2froad_5fboundary_2eproto), true);
namespace RoadBoundary {

// ===================================================================

void RoadBoundaryMsg::InitAsDefaultInstance() {
  ::RoadBoundary::_RoadBoundaryMsg_default_instance_._instance.get_mutable()->cloudmappermsg_ = const_cast< ::RoadBoundary::CloudMapperMsg*>(
      ::RoadBoundary::CloudMapperMsg::internal_default_instance());
  ::RoadBoundary::_RoadBoundaryMsg_default_instance_._instance.get_mutable()->binreadermsg_ = const_cast< ::RoadBoundary::BinReaderMsg*>(
      ::RoadBoundary::BinReaderMsg::internal_default_instance());
  ::RoadBoundary::_RoadBoundaryMsg_default_instance_._instance.get_mutable()->groundsegmentationmsg_ = const_cast< ::RoadBoundary::GroundSegmentationMsg*>(
      ::RoadBoundary::GroundSegmentationMsg::internal_default_instance());
  ::RoadBoundary::_RoadBoundaryMsg_default_instance_._instance.get_mutable()->featurepointsmsg_ = const_cast< ::RoadBoundary::FeaturePointsMsg*>(
      ::RoadBoundary::FeaturePointsMsg::internal_default_instance());
  ::RoadBoundary::_RoadBoundaryMsg_default_instance_._instance.get_mutable()->boundarypointsmsg_ = const_cast< ::RoadBoundary::BoundaryPointsMsg*>(
      ::RoadBoundary::BoundaryPointsMsg::internal_default_instance());
}
class RoadBoundaryMsg::_Internal {
 public:
  static const ::RoadBoundary::CloudMapperMsg& cloudmappermsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::BinReaderMsg& binreadermsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::GroundSegmentationMsg& groundsegmentationmsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::FeaturePointsMsg& featurepointsmsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::BoundaryPointsMsg& boundarypointsmsg(const RoadBoundaryMsg* msg);
};

const ::RoadBoundary::CloudMapperMsg&
RoadBoundaryMsg::_Internal::cloudmappermsg(const RoadBoundaryMsg* msg) {
  return *msg->cloudmappermsg_;
}
const ::RoadBoundary::BinReaderMsg&
RoadBoundaryMsg::_Internal::binreadermsg(const RoadBoundaryMsg* msg) {
  return *msg->binreadermsg_;
}
const ::RoadBoundary::GroundSegmentationMsg&
RoadBoundaryMsg::_Internal::groundsegmentationmsg(const RoadBoundaryMsg* msg) {
  return *msg->groundsegmentationmsg_;
}
const ::RoadBoundary::FeaturePointsMsg&
RoadBoundaryMsg::_Internal::featurepointsmsg(const RoadBoundaryMsg* msg) {
  return *msg->featurepointsmsg_;
}
const ::RoadBoundary::BoundaryPointsMsg&
RoadBoundaryMsg::_Internal::boundarypointsmsg(const RoadBoundaryMsg* msg) {
  return *msg->boundarypointsmsg_;
}
RoadBoundaryMsg::RoadBoundaryMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.RoadBoundaryMsg)
}
RoadBoundaryMsg::RoadBoundaryMsg(const RoadBoundaryMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cloudmappermsg()) {
    cloudmappermsg_ = new ::RoadBoundary::CloudMapperMsg(*from.cloudmappermsg_);
  } else {
    cloudmappermsg_ = nullptr;
  }
  if (from.has_binreadermsg()) {
    binreadermsg_ = new ::RoadBoundary::BinReaderMsg(*from.binreadermsg_);
  } else {
    binreadermsg_ = nullptr;
  }
  if (from.has_groundsegmentationmsg()) {
    groundsegmentationmsg_ = new ::RoadBoundary::GroundSegmentationMsg(*from.groundsegmentationmsg_);
  } else {
    groundsegmentationmsg_ = nullptr;
  }
  if (from.has_featurepointsmsg()) {
    featurepointsmsg_ = new ::RoadBoundary::FeaturePointsMsg(*from.featurepointsmsg_);
  } else {
    featurepointsmsg_ = nullptr;
  }
  if (from.has_boundarypointsmsg()) {
    boundarypointsmsg_ = new ::RoadBoundary::BoundaryPointsMsg(*from.boundarypointsmsg_);
  } else {
    boundarypointsmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.RoadBoundaryMsg)
}

void RoadBoundaryMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto.base);
  ::memset(&cloudmappermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundarypointsmsg_) -
      reinterpret_cast<char*>(&cloudmappermsg_)) + sizeof(boundarypointsmsg_));
}

RoadBoundaryMsg::~RoadBoundaryMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.RoadBoundaryMsg)
  SharedDtor();
}

void RoadBoundaryMsg::SharedDtor() {
  if (this != internal_default_instance()) delete cloudmappermsg_;
  if (this != internal_default_instance()) delete binreadermsg_;
  if (this != internal_default_instance()) delete groundsegmentationmsg_;
  if (this != internal_default_instance()) delete featurepointsmsg_;
  if (this != internal_default_instance()) delete boundarypointsmsg_;
}

void RoadBoundaryMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadBoundaryMsg& RoadBoundaryMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadBoundaryMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void RoadBoundaryMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.RoadBoundaryMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cloudmappermsg_ != nullptr) {
    delete cloudmappermsg_;
  }
  cloudmappermsg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && binreadermsg_ != nullptr) {
    delete binreadermsg_;
  }
  binreadermsg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && groundsegmentationmsg_ != nullptr) {
    delete groundsegmentationmsg_;
  }
  groundsegmentationmsg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && featurepointsmsg_ != nullptr) {
    delete featurepointsmsg_;
  }
  featurepointsmsg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && boundarypointsmsg_ != nullptr) {
    delete boundarypointsmsg_;
  }
  boundarypointsmsg_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadBoundaryMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cloudmappermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_binreadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_groundsegmentationmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_featurepointsmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_boundarypointsmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadBoundaryMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.RoadBoundaryMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudmappermsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binreadermsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_groundsegmentationmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_featurepointsmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_boundarypointsmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.RoadBoundaryMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.RoadBoundaryMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadBoundaryMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.RoadBoundaryMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
  if (this->has_cloudmappermsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::cloudmappermsg(this), output);
  }

  // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
  if (this->has_binreadermsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::binreadermsg(this), output);
  }

  // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
  if (this->has_groundsegmentationmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::groundsegmentationmsg(this), output);
  }

  // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
  if (this->has_featurepointsmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::featurepointsmsg(this), output);
  }

  // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
  if (this->has_boundarypointsmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::boundarypointsmsg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.RoadBoundaryMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadBoundaryMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.RoadBoundaryMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
  if (this->has_cloudmappermsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::cloudmappermsg(this), target);
  }

  // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
  if (this->has_binreadermsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::binreadermsg(this), target);
  }

  // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
  if (this->has_groundsegmentationmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::groundsegmentationmsg(this), target);
  }

  // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
  if (this->has_featurepointsmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::featurepointsmsg(this), target);
  }

  // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
  if (this->has_boundarypointsmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::boundarypointsmsg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.RoadBoundaryMsg)
  return target;
}

size_t RoadBoundaryMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.RoadBoundaryMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
  if (this->has_cloudmappermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloudmappermsg_);
  }

  // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
  if (this->has_binreadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *binreadermsg_);
  }

  // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
  if (this->has_groundsegmentationmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groundsegmentationmsg_);
  }

  // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
  if (this->has_featurepointsmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *featurepointsmsg_);
  }

  // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
  if (this->has_boundarypointsmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundarypointsmsg_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadBoundaryMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.RoadBoundaryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundaryMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadBoundaryMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.RoadBoundaryMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.RoadBoundaryMsg)
    MergeFrom(*source);
  }
}

void RoadBoundaryMsg::MergeFrom(const RoadBoundaryMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.RoadBoundaryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cloudmappermsg()) {
    mutable_cloudmappermsg()->::RoadBoundary::CloudMapperMsg::MergeFrom(from.cloudmappermsg());
  }
  if (from.has_binreadermsg()) {
    mutable_binreadermsg()->::RoadBoundary::BinReaderMsg::MergeFrom(from.binreadermsg());
  }
  if (from.has_groundsegmentationmsg()) {
    mutable_groundsegmentationmsg()->::RoadBoundary::GroundSegmentationMsg::MergeFrom(from.groundsegmentationmsg());
  }
  if (from.has_featurepointsmsg()) {
    mutable_featurepointsmsg()->::RoadBoundary::FeaturePointsMsg::MergeFrom(from.featurepointsmsg());
  }
  if (from.has_boundarypointsmsg()) {
    mutable_boundarypointsmsg()->::RoadBoundary::BoundaryPointsMsg::MergeFrom(from.boundarypointsmsg());
  }
}

void RoadBoundaryMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.RoadBoundaryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundaryMsg::CopyFrom(const RoadBoundaryMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.RoadBoundaryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundaryMsg::IsInitialized() const {
  return true;
}

void RoadBoundaryMsg::InternalSwap(RoadBoundaryMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cloudmappermsg_, other->cloudmappermsg_);
  swap(binreadermsg_, other->binreadermsg_);
  swap(groundsegmentationmsg_, other->groundsegmentationmsg_);
  swap(featurepointsmsg_, other->featurepointsmsg_);
  swap(boundarypointsmsg_, other->boundarypointsmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadBoundaryMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloudMapperMsg::InitAsDefaultInstance() {
}
class CloudMapperMsg::_Internal {
 public:
};

CloudMapperMsg::CloudMapperMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.CloudMapperMsg)
}
CloudMapperMsg::CloudMapperMsg(const CloudMapperMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lowerbound_, &from.lowerbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&nscanrings_) -
    reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.CloudMapperMsg)
}

void CloudMapperMsg::SharedCtor() {
  ::memset(&lowerbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nscanrings_) -
      reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
}

CloudMapperMsg::~CloudMapperMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.CloudMapperMsg)
  SharedDtor();
}

void CloudMapperMsg::SharedDtor() {
}

void CloudMapperMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudMapperMsg& CloudMapperMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudMapperMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void CloudMapperMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.CloudMapperMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lowerbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nscanrings_) -
      reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudMapperMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lowerBound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lowerbound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float upperBound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          upperbound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nScanRings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nscanrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudMapperMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.CloudMapperMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lowerBound = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowerbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float upperBound = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upperbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nScanRings = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscanrings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.CloudMapperMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.CloudMapperMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudMapperMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.CloudMapperMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lowerBound = 1;
  if (!(this->lowerbound() <= 0 && this->lowerbound() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->lowerbound(), output);
  }

  // float upperBound = 2;
  if (!(this->upperbound() <= 0 && this->upperbound() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->upperbound(), output);
  }

  // int32 nScanRings = 3;
  if (this->nscanrings() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->nscanrings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.CloudMapperMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudMapperMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.CloudMapperMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lowerBound = 1;
  if (!(this->lowerbound() <= 0 && this->lowerbound() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->lowerbound(), target);
  }

  // float upperBound = 2;
  if (!(this->upperbound() <= 0 && this->upperbound() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->upperbound(), target);
  }

  // int32 nScanRings = 3;
  if (this->nscanrings() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->nscanrings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.CloudMapperMsg)
  return target;
}

size_t CloudMapperMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.CloudMapperMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lowerBound = 1;
  if (!(this->lowerbound() <= 0 && this->lowerbound() >= 0)) {
    total_size += 1 + 4;
  }

  // float upperBound = 2;
  if (!(this->upperbound() <= 0 && this->upperbound() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nScanRings = 3;
  if (this->nscanrings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nscanrings());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudMapperMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.CloudMapperMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudMapperMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudMapperMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.CloudMapperMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.CloudMapperMsg)
    MergeFrom(*source);
  }
}

void CloudMapperMsg::MergeFrom(const CloudMapperMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.CloudMapperMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lowerbound() <= 0 && from.lowerbound() >= 0)) {
    set_lowerbound(from.lowerbound());
  }
  if (!(from.upperbound() <= 0 && from.upperbound() >= 0)) {
    set_upperbound(from.upperbound());
  }
  if (from.nscanrings() != 0) {
    set_nscanrings(from.nscanrings());
  }
}

void CloudMapperMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.CloudMapperMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudMapperMsg::CopyFrom(const CloudMapperMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.CloudMapperMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudMapperMsg::IsInitialized() const {
  return true;
}

void CloudMapperMsg::InternalSwap(CloudMapperMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lowerbound_, other->lowerbound_);
  swap(upperbound_, other->upperbound_);
  swap(nscanrings_, other->nscanrings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudMapperMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinReaderMsg::InitAsDefaultInstance() {
}
class BinReaderMsg::_Internal {
 public:
};

BinReaderMsg::BinReaderMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.BinReaderMsg)
}
BinReaderMsg::BinReaderMsg(const BinReaderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bindir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bindir().empty()) {
    bindir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bindir_);
  }
  framenum_ = from.framenum_;
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.BinReaderMsg)
}

void BinReaderMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto.base);
  bindir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framenum_ = 0;
}

BinReaderMsg::~BinReaderMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.BinReaderMsg)
  SharedDtor();
}

void BinReaderMsg::SharedDtor() {
  bindir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BinReaderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinReaderMsg& BinReaderMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinReaderMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void BinReaderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.BinReaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bindir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framenum_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinReaderMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string binDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bindir(), ptr, ctx, "RoadBoundary.BinReaderMsg.binDir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frameNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          framenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinReaderMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.BinReaderMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string binDir = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bindir()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bindir().data(), static_cast<int>(this->bindir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RoadBoundary.BinReaderMsg.binDir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frameNum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.BinReaderMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.BinReaderMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinReaderMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.BinReaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string binDir = 1;
  if (this->bindir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bindir().data(), static_cast<int>(this->bindir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoadBoundary.BinReaderMsg.binDir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bindir(), output);
  }

  // int32 frameNum = 2;
  if (this->framenum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->framenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.BinReaderMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinReaderMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.BinReaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string binDir = 1;
  if (this->bindir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bindir().data(), static_cast<int>(this->bindir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoadBoundary.BinReaderMsg.binDir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bindir(), target);
  }

  // int32 frameNum = 2;
  if (this->framenum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->framenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.BinReaderMsg)
  return target;
}

size_t BinReaderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.BinReaderMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string binDir = 1;
  if (this->bindir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bindir());
  }

  // int32 frameNum = 2;
  if (this->framenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framenum());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinReaderMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.BinReaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BinReaderMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinReaderMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.BinReaderMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.BinReaderMsg)
    MergeFrom(*source);
  }
}

void BinReaderMsg::MergeFrom(const BinReaderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.BinReaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bindir().size() > 0) {

    bindir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bindir_);
  }
  if (from.framenum() != 0) {
    set_framenum(from.framenum());
  }
}

void BinReaderMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.BinReaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinReaderMsg::CopyFrom(const BinReaderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.BinReaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinReaderMsg::IsInitialized() const {
  return true;
}

void BinReaderMsg::InternalSwap(BinReaderMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bindir_.Swap(&other->bindir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(framenum_, other->framenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinReaderMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundSegmentationMsg::InitAsDefaultInstance() {
}
class GroundSegmentationMsg::_Internal {
 public:
};

GroundSegmentationMsg::GroundSegmentationMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.GroundSegmentationMsg)
}
GroundSegmentationMsg::GroundSegmentationMsg(const GroundSegmentationMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  segthres_ = from.segthres_;
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.GroundSegmentationMsg)
}

void GroundSegmentationMsg::SharedCtor() {
  segthres_ = 0;
}

GroundSegmentationMsg::~GroundSegmentationMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.GroundSegmentationMsg)
  SharedDtor();
}

void GroundSegmentationMsg::SharedDtor() {
}

void GroundSegmentationMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundSegmentationMsg& GroundSegmentationMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundSegmentationMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void GroundSegmentationMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.GroundSegmentationMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segthres_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GroundSegmentationMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float segThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          segthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GroundSegmentationMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.GroundSegmentationMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float segThres = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &segthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.GroundSegmentationMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.GroundSegmentationMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GroundSegmentationMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.GroundSegmentationMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float segThres = 1;
  if (!(this->segthres() <= 0 && this->segthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->segthres(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.GroundSegmentationMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundSegmentationMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.GroundSegmentationMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float segThres = 1;
  if (!(this->segthres() <= 0 && this->segthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->segthres(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.GroundSegmentationMsg)
  return target;
}

size_t GroundSegmentationMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.GroundSegmentationMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float segThres = 1;
  if (!(this->segthres() <= 0 && this->segthres() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundSegmentationMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.GroundSegmentationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundSegmentationMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundSegmentationMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.GroundSegmentationMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.GroundSegmentationMsg)
    MergeFrom(*source);
  }
}

void GroundSegmentationMsg::MergeFrom(const GroundSegmentationMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.GroundSegmentationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.segthres() <= 0 && from.segthres() >= 0)) {
    set_segthres(from.segthres());
  }
}

void GroundSegmentationMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.GroundSegmentationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundSegmentationMsg::CopyFrom(const GroundSegmentationMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.GroundSegmentationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundSegmentationMsg::IsInitialized() const {
  return true;
}

void GroundSegmentationMsg::InternalSwap(GroundSegmentationMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(segthres_, other->segthres_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundSegmentationMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeaturePointsMsg::InitAsDefaultInstance() {
}
class FeaturePointsMsg::_Internal {
 public:
};

FeaturePointsMsg::FeaturePointsMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.FeaturePointsMsg)
}
FeaturePointsMsg::FeaturePointsMsg(const FeaturePointsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heightmaxthres_, &from.heightmaxthres_,
    static_cast<size_t>(reinterpret_cast<char*>(&usehorizon_) -
    reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.FeaturePointsMsg)
}

void FeaturePointsMsg::SharedCtor() {
  ::memset(&heightmaxthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usehorizon_) -
      reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
}

FeaturePointsMsg::~FeaturePointsMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.FeaturePointsMsg)
  SharedDtor();
}

void FeaturePointsMsg::SharedDtor() {
}

void FeaturePointsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeaturePointsMsg& FeaturePointsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeaturePointsMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void FeaturePointsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.FeaturePointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heightmaxthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usehorizon_) -
      reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeaturePointsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float heightMaxThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          heightmaxthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heightMinThres = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heightminthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 heightRegion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heightregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heightSigmaThre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heightsigmathre_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 curvatureRegion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curvatureregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float curvatureThres = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          curvaturethres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distanceHorizonThres = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          distancehorizonthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distanceVerticalThres = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          distanceverticalthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angularRes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          angularres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool useVerticle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          useverticle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useHorizon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          usehorizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeaturePointsMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.FeaturePointsMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float heightMaxThres = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heightmaxthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heightMinThres = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heightminthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 heightRegion = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &heightregion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heightSigmaThre = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heightsigmathre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curvatureRegion = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvatureregion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvatureThres = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvaturethres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distanceHorizonThres = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distancehorizonthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distanceVerticalThres = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distanceverticalthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angularRes = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angularres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useVerticle = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useverticle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useHorizon = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usehorizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.FeaturePointsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.FeaturePointsMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeaturePointsMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.FeaturePointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float heightMaxThres = 1;
  if (!(this->heightmaxthres() <= 0 && this->heightmaxthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->heightmaxthres(), output);
  }

  // float heightMinThres = 2;
  if (!(this->heightminthres() <= 0 && this->heightminthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->heightminthres(), output);
  }

  // int32 heightRegion = 3;
  if (this->heightregion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->heightregion(), output);
  }

  // float heightSigmaThre = 4;
  if (!(this->heightsigmathre() <= 0 && this->heightsigmathre() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->heightsigmathre(), output);
  }

  // int32 curvatureRegion = 5;
  if (this->curvatureregion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->curvatureregion(), output);
  }

  // float curvatureThres = 6;
  if (!(this->curvaturethres() <= 0 && this->curvaturethres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->curvaturethres(), output);
  }

  // float distanceHorizonThres = 7;
  if (!(this->distancehorizonthres() <= 0 && this->distancehorizonthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->distancehorizonthres(), output);
  }

  // float distanceVerticalThres = 8;
  if (!(this->distanceverticalthres() <= 0 && this->distanceverticalthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->distanceverticalthres(), output);
  }

  // float angularRes = 9;
  if (!(this->angularres() <= 0 && this->angularres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->angularres(), output);
  }

  // bool useVerticle = 10;
  if (this->useverticle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->useverticle(), output);
  }

  // bool useHorizon = 11;
  if (this->usehorizon() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->usehorizon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.FeaturePointsMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeaturePointsMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.FeaturePointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float heightMaxThres = 1;
  if (!(this->heightmaxthres() <= 0 && this->heightmaxthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->heightmaxthres(), target);
  }

  // float heightMinThres = 2;
  if (!(this->heightminthres() <= 0 && this->heightminthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->heightminthres(), target);
  }

  // int32 heightRegion = 3;
  if (this->heightregion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->heightregion(), target);
  }

  // float heightSigmaThre = 4;
  if (!(this->heightsigmathre() <= 0 && this->heightsigmathre() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->heightsigmathre(), target);
  }

  // int32 curvatureRegion = 5;
  if (this->curvatureregion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->curvatureregion(), target);
  }

  // float curvatureThres = 6;
  if (!(this->curvaturethres() <= 0 && this->curvaturethres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->curvaturethres(), target);
  }

  // float distanceHorizonThres = 7;
  if (!(this->distancehorizonthres() <= 0 && this->distancehorizonthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->distancehorizonthres(), target);
  }

  // float distanceVerticalThres = 8;
  if (!(this->distanceverticalthres() <= 0 && this->distanceverticalthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->distanceverticalthres(), target);
  }

  // float angularRes = 9;
  if (!(this->angularres() <= 0 && this->angularres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->angularres(), target);
  }

  // bool useVerticle = 10;
  if (this->useverticle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->useverticle(), target);
  }

  // bool useHorizon = 11;
  if (this->usehorizon() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->usehorizon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.FeaturePointsMsg)
  return target;
}

size_t FeaturePointsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.FeaturePointsMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float heightMaxThres = 1;
  if (!(this->heightmaxthres() <= 0 && this->heightmaxthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float heightMinThres = 2;
  if (!(this->heightminthres() <= 0 && this->heightminthres() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 heightRegion = 3;
  if (this->heightregion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->heightregion());
  }

  // float heightSigmaThre = 4;
  if (!(this->heightsigmathre() <= 0 && this->heightsigmathre() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 curvatureRegion = 5;
  if (this->curvatureregion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->curvatureregion());
  }

  // float curvatureThres = 6;
  if (!(this->curvaturethres() <= 0 && this->curvaturethres() >= 0)) {
    total_size += 1 + 4;
  }

  // float distanceHorizonThres = 7;
  if (!(this->distancehorizonthres() <= 0 && this->distancehorizonthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float distanceVerticalThres = 8;
  if (!(this->distanceverticalthres() <= 0 && this->distanceverticalthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float angularRes = 9;
  if (!(this->angularres() <= 0 && this->angularres() >= 0)) {
    total_size += 1 + 4;
  }

  // bool useVerticle = 10;
  if (this->useverticle() != 0) {
    total_size += 1 + 1;
  }

  // bool useHorizon = 11;
  if (this->usehorizon() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeaturePointsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.FeaturePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturePointsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeaturePointsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.FeaturePointsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.FeaturePointsMsg)
    MergeFrom(*source);
  }
}

void FeaturePointsMsg::MergeFrom(const FeaturePointsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.FeaturePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.heightmaxthres() <= 0 && from.heightmaxthres() >= 0)) {
    set_heightmaxthres(from.heightmaxthres());
  }
  if (!(from.heightminthres() <= 0 && from.heightminthres() >= 0)) {
    set_heightminthres(from.heightminthres());
  }
  if (from.heightregion() != 0) {
    set_heightregion(from.heightregion());
  }
  if (!(from.heightsigmathre() <= 0 && from.heightsigmathre() >= 0)) {
    set_heightsigmathre(from.heightsigmathre());
  }
  if (from.curvatureregion() != 0) {
    set_curvatureregion(from.curvatureregion());
  }
  if (!(from.curvaturethres() <= 0 && from.curvaturethres() >= 0)) {
    set_curvaturethres(from.curvaturethres());
  }
  if (!(from.distancehorizonthres() <= 0 && from.distancehorizonthres() >= 0)) {
    set_distancehorizonthres(from.distancehorizonthres());
  }
  if (!(from.distanceverticalthres() <= 0 && from.distanceverticalthres() >= 0)) {
    set_distanceverticalthres(from.distanceverticalthres());
  }
  if (!(from.angularres() <= 0 && from.angularres() >= 0)) {
    set_angularres(from.angularres());
  }
  if (from.useverticle() != 0) {
    set_useverticle(from.useverticle());
  }
  if (from.usehorizon() != 0) {
    set_usehorizon(from.usehorizon());
  }
}

void FeaturePointsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.FeaturePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePointsMsg::CopyFrom(const FeaturePointsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.FeaturePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePointsMsg::IsInitialized() const {
  return true;
}

void FeaturePointsMsg::InternalSwap(FeaturePointsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(heightmaxthres_, other->heightmaxthres_);
  swap(heightminthres_, other->heightminthres_);
  swap(heightregion_, other->heightregion_);
  swap(heightsigmathre_, other->heightsigmathre_);
  swap(curvatureregion_, other->curvatureregion_);
  swap(curvaturethres_, other->curvaturethres_);
  swap(distancehorizonthres_, other->distancehorizonthres_);
  swap(distanceverticalthres_, other->distanceverticalthres_);
  swap(angularres_, other->angularres_);
  swap(useverticle_, other->useverticle_);
  swap(usehorizon_, other->usehorizon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturePointsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundaryPointsMsg::InitAsDefaultInstance() {
}
class BoundaryPointsMsg::_Internal {
 public:
};

BoundaryPointsMsg::BoundaryPointsMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadBoundary.BoundaryPointsMsg)
}
BoundaryPointsMsg::BoundaryPointsMsg(const BoundaryPointsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&varthres_, &from.varthres_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecurveransac_) -
    reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.BoundaryPointsMsg)
}

void BoundaryPointsMsg::SharedCtor() {
  ::memset(&varthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecurveransac_) -
      reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
}

BoundaryPointsMsg::~BoundaryPointsMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.BoundaryPointsMsg)
  SharedDtor();
}

void BoundaryPointsMsg::SharedDtor() {
}

void BoundaryPointsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryPointsMsg& BoundaryPointsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryPointsMsg_proto_2froad_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void BoundaryPointsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.BoundaryPointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&varthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecurveransac_) -
      reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundaryPointsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float varThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          varthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float meanThres = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          meanthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 gridNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gridnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gridRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          gridres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curveFitThres = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          curvefitthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool useCurveRansac = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          usecurveransac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundaryPointsMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadBoundary.BoundaryPointsMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float varThres = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float meanThres = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gridNum = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gridRes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gridres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curveFitThres = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvefitthres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useCurveRansac = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usecurveransac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadBoundary.BoundaryPointsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadBoundary.BoundaryPointsMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundaryPointsMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadBoundary.BoundaryPointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float varThres = 1;
  if (!(this->varthres() <= 0 && this->varthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->varthres(), output);
  }

  // float meanThres = 2;
  if (!(this->meanthres() <= 0 && this->meanthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->meanthres(), output);
  }

  // int32 gridNum = 3;
  if (this->gridnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->gridnum(), output);
  }

  // float gridRes = 4;
  if (!(this->gridres() <= 0 && this->gridres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->gridres(), output);
  }

  // float curveFitThres = 5;
  if (!(this->curvefitthres() <= 0 && this->curvefitthres() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->curvefitthres(), output);
  }

  // bool useCurveRansac = 6;
  if (this->usecurveransac() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->usecurveransac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadBoundary.BoundaryPointsMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryPointsMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.BoundaryPointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float varThres = 1;
  if (!(this->varthres() <= 0 && this->varthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->varthres(), target);
  }

  // float meanThres = 2;
  if (!(this->meanthres() <= 0 && this->meanthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->meanthres(), target);
  }

  // int32 gridNum = 3;
  if (this->gridnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->gridnum(), target);
  }

  // float gridRes = 4;
  if (!(this->gridres() <= 0 && this->gridres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->gridres(), target);
  }

  // float curveFitThres = 5;
  if (!(this->curvefitthres() <= 0 && this->curvefitthres() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->curvefitthres(), target);
  }

  // bool useCurveRansac = 6;
  if (this->usecurveransac() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->usecurveransac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.BoundaryPointsMsg)
  return target;
}

size_t BoundaryPointsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.BoundaryPointsMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float varThres = 1;
  if (!(this->varthres() <= 0 && this->varthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float meanThres = 2;
  if (!(this->meanthres() <= 0 && this->meanthres() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 gridNum = 3;
  if (this->gridnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gridnum());
  }

  // float gridRes = 4;
  if (!(this->gridres() <= 0 && this->gridres() >= 0)) {
    total_size += 1 + 4;
  }

  // float curveFitThres = 5;
  if (!(this->curvefitthres() <= 0 && this->curvefitthres() >= 0)) {
    total_size += 1 + 4;
  }

  // bool useCurveRansac = 6;
  if (this->usecurveransac() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryPointsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.BoundaryPointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPointsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryPointsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.BoundaryPointsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.BoundaryPointsMsg)
    MergeFrom(*source);
  }
}

void BoundaryPointsMsg::MergeFrom(const BoundaryPointsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.BoundaryPointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.varthres() <= 0 && from.varthres() >= 0)) {
    set_varthres(from.varthres());
  }
  if (!(from.meanthres() <= 0 && from.meanthres() >= 0)) {
    set_meanthres(from.meanthres());
  }
  if (from.gridnum() != 0) {
    set_gridnum(from.gridnum());
  }
  if (!(from.gridres() <= 0 && from.gridres() >= 0)) {
    set_gridres(from.gridres());
  }
  if (!(from.curvefitthres() <= 0 && from.curvefitthres() >= 0)) {
    set_curvefitthres(from.curvefitthres());
  }
  if (from.usecurveransac() != 0) {
    set_usecurveransac(from.usecurveransac());
  }
}

void BoundaryPointsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.BoundaryPointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPointsMsg::CopyFrom(const BoundaryPointsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.BoundaryPointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPointsMsg::IsInitialized() const {
  return true;
}

void BoundaryPointsMsg::InternalSwap(BoundaryPointsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(varthres_, other->varthres_);
  swap(meanthres_, other->meanthres_);
  swap(gridnum_, other->gridnum_);
  swap(gridres_, other->gridres_);
  swap(curvefitthres_, other->curvefitthres_);
  swap(usecurveransac_, other->usecurveransac_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryPointsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadBoundary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadBoundary::RoadBoundaryMsg* Arena::CreateMaybeMessage< ::RoadBoundary::RoadBoundaryMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::RoadBoundaryMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::CloudMapperMsg* Arena::CreateMaybeMessage< ::RoadBoundary::CloudMapperMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::CloudMapperMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::BinReaderMsg* Arena::CreateMaybeMessage< ::RoadBoundary::BinReaderMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::BinReaderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::GroundSegmentationMsg* Arena::CreateMaybeMessage< ::RoadBoundary::GroundSegmentationMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::GroundSegmentationMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::FeaturePointsMsg* Arena::CreateMaybeMessage< ::RoadBoundary::FeaturePointsMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::FeaturePointsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::BoundaryPointsMsg* Arena::CreateMaybeMessage< ::RoadBoundary::BoundaryPointsMsg >(Arena* arena) {
  return Arena::CreateInternal< ::RoadBoundary::BoundaryPointsMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
